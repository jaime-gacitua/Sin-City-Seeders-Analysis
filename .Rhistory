transaction.data$thursSun <- '0'
transaction.data$thursSun[transaction.data$DayOfWeek %in% c("Thursday",
"Friday",
"Saturday",
"Sunday")] <- '1'
transactions.driver <- group_by(transaction.data, driver.id, day, DayOfWeek, thursSun) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(total.bill.usd) )
sp <- ggplot(data = transactions.driver, aes(x =day, y=count, fill=thursSun)) +
geom_bar(stat = "sum") +
facet_grid(driver.id ~ .) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sp
# Transactions per driver per day of weeek #1
transactions.driver.dayofweek <- group_by(transactions.driver, driver.id, DayOfWeek) %>%
dplyr::summarise(count = sum(count),
TotalDollars = sum(TotalDollars) )
# Calculating number of days for each day of week #2
transactions.daysofweek.base <- group_by(transaction.data, day, DayOfWeek) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(total.bill.usd) )
transactions.daysofweek <- group_by(transactions.daysofweek.base, DayOfWeek) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(TotalDollars) )
# Join #1 and #2
transactions.driver.dayofweek <- dplyr::inner_join(transactions.driver.dayofweek, transactions.daysofweek,
by = c("DayOfWeek"),
suffix = c(".driver", ".DayOfWeek"))
# Calculate transactions per day, for each DayOfWeek
transactions.driver.dayofweek$CountPerDay <- transactions.driver.dayofweek$count.driver / transactions.driver.dayofweek$count.DayOfWeek
# Spread DayofWeek data over columns, as factors
transactions.driver.factors <- spread(transactions.driver.dayofweek[,c("driver.id", "DayOfWeek","CountPerDay")],
DayOfWeek,
CountPerDay,
fill = 0)
## Cluster Analysis
# Determine number of clusters
wss <- (nrow(transactions.driver.factors)-1)*sum(apply(transactions.driver.factors,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(transactions.driver.factors[,-1],
centers=i, nstart = 500 )$withinss)
plot(1:15, wss, type="b", main = "Types of Drivers: Cluster Analysis - Determining Number of clusters", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-Means Cluster Analysis
fit <- kmeans(transactions.driver.factors[,-1], centers = 2, nstart = 500) # 2 cluster solution
# get cluster means
aggregate(transactions.driver.factors[,-1],by=list(fit$cluster),FUN=mean)
# append cluster assignment
transactions.driver.factors.cluster <- data.frame(transactions.driver.factors, fit$cluster)
#clusplot(transactions.driver.factors, fit$cluster, color=TRUE, shade=TRUE,
#  	labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
#plotcluster(transactions.driver.factors[,-1], fit$cluster)
# PCA Plot
transactions.driver.pca <- prcomp(transactions.driver.factors[,-1], center = TRUE, scale. = TRUE)
g <- ggbiplot(transactions.driver.pca, obs.scale = 1, var.scale = 1,
groups = as.factor(transactions.driver.factors.cluster$fit.cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
g
driver.value <- group_by(transactions.driver, driver.id) %>%
dplyr::summarise(TotalDollars = sum(TotalDollars))
driver.value$LTVD <- driver.value$TotalDollars / as.integer(timeframe)
driver.value$LTV <- driver.value$LTVD * 3650
transactions.driver.factors.cluster.value <- inner_join(transactions.driver.factors.cluster,
driver.value,
by = "driver.id")
plot_ly(data = transactions.driver.factors.cluster.value,
y = LTV,
x = fit.cluster,
type = "box") %>%
layout(autosize = FALSE, width = 800,
title = "Driver Lifetime Value per cluster",
xaxis = list(title = "Cluster"),
yaxis = list(title = "Lifetime Value (LTV)"))
lm.weekday <- lm(LTV ~ Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday ,
data = transactions.driver.factors.cluster.value)
#plot_ly(x = lm.weekday$coefficients[1], y = lm.weekday$coefficients[2], type = "bar")
summary(lm.weekday)
lm.weekday$coefficients
plot(lm.weekday$coefficients[-1],
main = "Impact of Workday in Driver Lifetime Value",
xlab = "Day of the Week",
ylab = "Impact of Workday in LTV",
pch = 18)
rm(list = ls(all=TRUE))
## Load the libraries
library(readr)
library(plotly)
library(ggplot2)
library(lubridate)
library(tidyr)
library(cluster)
library(fpc)
library(devtools)
library(ggbiplot)
library(dplyr)
# Extract data
transaction.data <- read_csv("./data/lyft_data.csv")
## Transform Data
# Sorty by Unix Date
transaction.data <- transaction.data[order(transaction.data$unix.timestamp),]
transaction.data$driver.id <- factor(transaction.data$driver.id)
# Convert timestamp to date field
transaction.data$unix.timestamp.date <- as.POSIXct(transaction.data$unix.timestamp, origin="1970-01-01")
# Capture Weekday
transaction.data$day <- as.character(trunc(transaction.data$unix.timestamp.date, units = "days"))
transaction.data$hour <- hour(round_date(transaction.data$unix.timestamp.date, "hour"))
transaction.data$DayOfWeek <- weekdays(as.Date(transaction.data$unix.timestamp.date))
transaction.data$DayOfWeek <- factor(transaction.data$DayOfWeek, levels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"))
transaction.data$weekend <- 0
transaction.data$weekend[transaction.data$DayOfWeek %in% c("Saturday", "Sunday")] <- 1
#transaction.data$TimeOfDay[transaction.data$hour <= ]
unique(transaction.data$hour)
total.rows <- nrow(transaction.data)
initial.date <- min(transaction.data$unix.timestamp.date)
final.date <- max(transaction.data$unix.timestamp.date)
timeframe <- difftime(final.date, initial.date, units = "days")
num.drivers <- unique(transaction.data$driver.id)
total.bill <- sum(transaction.data$total.bill.usd)
daily.value <- total.bill / as.double(timeframe) / length(num.drivers)
#daily.transactions <- group_by(transaction.data, DayOfWeek ) %>%
#  summarise(count = n(),
#            TotalDollars = sum(total.bill.usd) )
plot_ly(x = transaction.data$day , type = "histogram") %>%
layout(autosize = FALSE, width = 800, title = "Daily number of transactions")
subplot(
plot_ly(y = transaction.data$total.bill.usd , type = "box") %>%
layout(autosize = FALSE, width = 800),
plot_ly(x = transaction.data$total.bill.usd , type = "histogram") %>%
layout(autosize = FALSE, width = 800),
margin = 0.05
) %>%
layout(title = paste("Distribution of Bills (in USD), #bills:",
format(total.rows, big.mark = ","),
"SUM(USD):", format(total.bill, big.mark = ",") ),
yaxis = list(title = "Bills (in USD)"),
showlegend = FALSE
)
#daily.transactions <- group_by(transaction.data, DayOfWeek ) %>%
#  summarise(count = n(),
#            TotalDollars = sum(total.bill.usd) )
subplot(
plot_ly(x = transaction.data$DayOfWeek, type = "histogram") %>%
layout(autosize = FALSE, width = 800,
xaxis = list(type = "category",
categoryorder = "array",
categoryarray = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")
)
),
plot_ly(y = transaction.data$total.bill.usd, color = transaction.data$DayOfWeek, type = "box") %>%
layout(autosize = FALSE, width = 800,
xaxis = list(autorange = "reversed"),
showlegend = FALSE)
) %>%
layout(title = "Breakdown of Transactions into Day of the Week | Count and dollar amount")
transaction.data$thursSun <- '0'
transaction.data$thursSun[transaction.data$DayOfWeek %in% c("Thursday",
"Friday",
"Saturday",
"Sunday")] <- '1'
transactions.driver <- group_by(transaction.data, driver.id, day, DayOfWeek, thursSun) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(total.bill.usd) )
sp <- ggplot(data = transactions.driver, aes(x =day, y=count, fill=thursSun)) +
geom_bar(stat = "sum") +
facet_grid(driver.id ~ .) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sp
# Transactions per driver per day of weeek #1
transactions.driver.dayofweek <- group_by(transactions.driver, driver.id, DayOfWeek) %>%
dplyr::summarise(count = sum(count),
TotalDollars = sum(TotalDollars) )
# Calculating number of days for each day of week #2
transactions.daysofweek.base <- group_by(transaction.data, day, DayOfWeek) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(total.bill.usd) )
transactions.daysofweek <- group_by(transactions.daysofweek.base, DayOfWeek) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(TotalDollars) )
# Join #1 and #2
transactions.driver.dayofweek <- dplyr::inner_join(transactions.driver.dayofweek, transactions.daysofweek,
by = c("DayOfWeek"),
suffix = c(".driver", ".DayOfWeek"))
# Calculate transactions per day, for each DayOfWeek
transactions.driver.dayofweek$CountPerDay <- transactions.driver.dayofweek$count.driver / transactions.driver.dayofweek$count.DayOfWeek
# Spread DayofWeek data over columns, as factors
transactions.driver.factors <- spread(transactions.driver.dayofweek[,c("driver.id", "DayOfWeek","CountPerDay")],
DayOfWeek,
CountPerDay,
fill = 0)
## Cluster Analysis
# Determine number of clusters
wss <- (nrow(transactions.driver.factors)-1)*sum(apply(transactions.driver.factors,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(transactions.driver.factors[,-1],
centers=i, nstart = 500 )$withinss)
plot(1:15, wss, type="b", main = "Types of Drivers: Cluster Analysis - Determining Number of clusters", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-Means Cluster Analysis
fit <- kmeans(transactions.driver.factors[,-1], centers = 2, nstart = 500) # 2 cluster solution
# get cluster means
aggregate(transactions.driver.factors[,-1],by=list(fit$cluster),FUN=mean)
# append cluster assignment
transactions.driver.factors.cluster <- data.frame(transactions.driver.factors, fit$cluster)
#clusplot(transactions.driver.factors, fit$cluster, color=TRUE, shade=TRUE,
#  	labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
#plotcluster(transactions.driver.factors[,-1], fit$cluster)
# PCA Plot
transactions.driver.pca <- prcomp(transactions.driver.factors[,-1], center = TRUE, scale. = TRUE)
g <- ggbiplot(transactions.driver.pca, obs.scale = 1, var.scale = 1,
groups = as.factor(transactions.driver.factors.cluster$fit.cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
g
driver.value <- group_by(transactions.driver, driver.id) %>%
dplyr::summarise(TotalDollars = sum(TotalDollars))
driver.value$LTVD <- driver.value$TotalDollars / as.integer(timeframe)
driver.value$LTV <- driver.value$LTVD * 3650
transactions.driver.factors.cluster.value <- inner_join(transactions.driver.factors.cluster,
driver.value,
by = "driver.id")
plot_ly(data = transactions.driver.factors.cluster.value,
y = LTV,
x = fit.cluster,
type = "box") %>%
layout(autosize = FALSE, width = 800,
title = "Driver Lifetime Value per cluster",
xaxis = list(title = "Cluster"),
yaxis = list(title = "Lifetime Value (LTV)"))
lm.weekday <- lm(LTV ~ Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday ,
data = transactions.driver.factors.cluster.value)
#plot_ly(x = lm.weekday$coefficients[1], y = lm.weekday$coefficients[2], type = "bar")
summary(lm.weekday)
lm.weekday$coefficients
plot(lm.weekday$coefficients[-1],
main = "Impact of Workday in Driver Lifetime Value",
xlab = "Day of the Week",
ylab = "Impact of Workday in LTV",
pch = 18)
# Transactions per driver per day of weeek #1
transactions.driver.dayofweek <- group_by(transactions.driver, driver.id, DayOfWeek) %>%
dplyr::summarise(count = sum(count),
TotalDollars = sum(TotalDollars) )
# Calculating number of days for each day of week #2
transactions.daysofweek.base <- group_by(transaction.data, day, DayOfWeek) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(total.bill.usd) )
transactions.daysofweek <- group_by(transactions.daysofweek.base, DayOfWeek) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(TotalDollars) )
# Join #1 and #2
transactions.driver.dayofweek <- dplyr::inner_join(transactions.driver.dayofweek, transactions.daysofweek,
by = c("DayOfWeek"),
suffix = c(".driver", ".DayOfWeek"))
# Calculate transactions per day, for each DayOfWeek
transactions.driver.dayofweek$CountPerDay <- transactions.driver.dayofweek$count.driver / transactions.driver.dayofweek$count.DayOfWeek
# Spread DayofWeek data over columns, as factors
transactions.driver.factors <- spread(transactions.driver.dayofweek[,c("driver.id", "DayOfWeek","CountPerDay")],
DayOfWeek,
CountPerDay,
fill = 0)
## Cluster Analysis
# Determine number of clusters
wss <- (nrow(transactions.driver.factors)-1)*sum(apply(transactions.driver.factors,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(transactions.driver.factors[,-1],
centers=i, nstart = 500 )$withinss)
plot(1:15, wss, type="b", main = "Types of Drivers: Cluster Analysis - Determining Number of clusters", xlab="Number of Clusters",
ylab="Within groups sum of squares")
rm(list = ls(all=TRUE))
## Load the libraries
library(readr)
library(plotly)
library(ggplot2)
library(lubridate)
library(tidyr)
library(cluster)
library(fpc)
library(devtools)
library(ggbiplot)
library(dplyr)
# Extract data
transaction.data <- read_csv("./data/lyft_data.csv")
## Transform Data
# Sorty by Unix Date
transaction.data <- transaction.data[order(transaction.data$unix.timestamp),]
transaction.data$driver.id <- factor(transaction.data$driver.id)
# Convert timestamp to date field
transaction.data$unix.timestamp.date <- as.POSIXct(transaction.data$unix.timestamp, origin="1970-01-01")
# Capture Weekday
transaction.data$day <- as.character(trunc(transaction.data$unix.timestamp.date, units = "days"))
transaction.data$hour <- hour(round_date(transaction.data$unix.timestamp.date, "hour"))
transaction.data$DayOfWeek <- weekdays(as.Date(transaction.data$unix.timestamp.date))
transaction.data$DayOfWeek <- factor(transaction.data$DayOfWeek, levels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"))
transaction.data$weekend <- 0
transaction.data$weekend[transaction.data$DayOfWeek %in% c("Saturday", "Sunday")] <- 1
#transaction.data$TimeOfDay[transaction.data$hour <= ]
unique(transaction.data$hour)
total.rows <- nrow(transaction.data)
initial.date <- min(transaction.data$unix.timestamp.date)
final.date <- max(transaction.data$unix.timestamp.date)
timeframe <- difftime(final.date, initial.date, units = "days")
num.drivers <- unique(transaction.data$driver.id)
total.bill <- sum(transaction.data$total.bill.usd)
daily.value <- total.bill / as.double(timeframe) / length(num.drivers)
#daily.transactions <- group_by(transaction.data, DayOfWeek ) %>%
#  summarise(count = n(),
#            TotalDollars = sum(total.bill.usd) )
plot_ly(x = transaction.data$day , type = "histogram") %>%
layout(autosize = FALSE, width = 800, title = "Daily number of transactions")
subplot(
plot_ly(y = transaction.data$total.bill.usd , type = "box") %>%
layout(autosize = FALSE, width = 800),
plot_ly(x = transaction.data$total.bill.usd , type = "histogram") %>%
layout(autosize = FALSE, width = 800),
margin = 0.05
) %>%
layout(title = paste("Distribution of Bills (in USD), #bills:",
format(total.rows, big.mark = ","),
"SUM(USD):", format(total.bill, big.mark = ",") ),
yaxis = list(title = "Bills (in USD)"),
showlegend = FALSE
)
#daily.transactions <- group_by(transaction.data, DayOfWeek ) %>%
#  summarise(count = n(),
#            TotalDollars = sum(total.bill.usd) )
subplot(
plot_ly(x = transaction.data$DayOfWeek, type = "histogram") %>%
layout(autosize = FALSE, width = 800,
xaxis = list(type = "category",
categoryorder = "array",
categoryarray = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")
)
),
plot_ly(y = transaction.data$total.bill.usd, color = transaction.data$DayOfWeek, type = "box") %>%
layout(autosize = FALSE, width = 800,
xaxis = list(autorange = "reversed"),
showlegend = FALSE)
) %>%
layout(title = "Breakdown of Transactions into Day of the Week | Count and dollar amount")
transaction.data$thursSun <- '0'
transaction.data$thursSun[transaction.data$DayOfWeek %in% c("Thursday",
"Friday",
"Saturday",
"Sunday")] <- '1'
transactions.driver <- group_by(transaction.data, driver.id, day, DayOfWeek, thursSun) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(total.bill.usd) )
sp <- ggplot(data = transactions.driver, aes(x =day, y=count, fill=thursSun)) +
geom_bar(stat = "sum") +
facet_grid(driver.id ~ .) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sp
# Transactions per driver per day of weeek #1
transactions.driver.dayofweek <- group_by(transactions.driver, driver.id, DayOfWeek) %>%
dplyr::summarise(count = sum(count),
TotalDollars = sum(TotalDollars) )
# Calculating number of days for each day of week #2
transactions.daysofweek.base <- group_by(transaction.data, day, DayOfWeek) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(total.bill.usd) )
transactions.daysofweek <- group_by(transactions.daysofweek.base, DayOfWeek) %>%
dplyr::summarise(count = n(),
TotalDollars = sum(TotalDollars) )
# Join #1 and #2
transactions.driver.dayofweek <- dplyr::inner_join(transactions.driver.dayofweek, transactions.daysofweek,
by = c("DayOfWeek"),
suffix = c(".driver", ".DayOfWeek"))
# Calculate transactions per day, for each DayOfWeek
transactions.driver.dayofweek$CountPerDay <- transactions.driver.dayofweek$count.driver / transactions.driver.dayofweek$count.DayOfWeek
# Spread DayofWeek data over columns, as factors
transactions.driver.factors <- spread(transactions.driver.dayofweek[,c("driver.id", "DayOfWeek","CountPerDay")],
DayOfWeek,
CountPerDay,
fill = 0)
## Cluster Analysis
# Determine number of clusters
wss <- (nrow(transactions.driver.factors)-1)*sum(apply(transactions.driver.factors,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(transactions.driver.factors[,-1],
centers=i, nstart = 500 )$withinss)
plot(1:15, wss, type="b", main = "Types of Drivers: Cluster Analysis - Determining Number of clusters", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-Means Cluster Analysis
fit <- kmeans(transactions.driver.factors[,-1], centers = 2, nstart = 500) # 2 cluster solution
# get cluster means
aggregate(transactions.driver.factors[,-1],by=list(fit$cluster),FUN=mean)
# append cluster assignment
transactions.driver.factors.cluster <- data.frame(transactions.driver.factors, fit$cluster)
#clusplot(transactions.driver.factors, fit$cluster, color=TRUE, shade=TRUE,
#  	labels=2, lines=0)
# Centroid Plot against 1st 2 discriminant functions
#plotcluster(transactions.driver.factors[,-1], fit$cluster)
# PCA Plot
transactions.driver.pca <- prcomp(transactions.driver.factors[,-1], center = TRUE, scale. = TRUE)
g <- ggbiplot(transactions.driver.pca, obs.scale = 1, var.scale = 1,
groups = as.factor(transactions.driver.factors.cluster$fit.cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
g
driver.value <- group_by(transactions.driver, driver.id) %>%
dplyr::summarise(TotalDollars = sum(TotalDollars))
driver.value$LTVD <- driver.value$TotalDollars / as.integer(timeframe)
driver.value$LTV <- driver.value$LTVD * 3650
transactions.driver.factors.cluster.value <- inner_join(transactions.driver.factors.cluster,
driver.value,
by = "driver.id")
plot_ly(data = transactions.driver.factors.cluster.value,
y = LTV,
x = fit.cluster,
type = "box") %>%
layout(autosize = FALSE, width = 800,
title = "Driver Lifetime Value per cluster",
xaxis = list(title = "Cluster"),
yaxis = list(title = "Lifetime Value (LTV)"))
lm.weekday <- lm(LTV ~ Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday ,
data = transactions.driver.factors.cluster.value)
#plot_ly(x = lm.weekday$coefficients[1], y = lm.weekday$coefficients[2], type = "bar")
summary(lm.weekday)
lm.weekday$coefficients
plot(lm.weekday$coefficients[-1],
main = "Impact of Workday in Driver Lifetime Value",
xlab = "Day of the Week",
ylab = "Impact of Workday in LTV",
pch = 18)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/jgaci/Dropbox/2016_Fall/Applied_Data_Science/Shiny_Server/run.R', echo=TRUE)
runApp(getwd())
shiny::runApp('C:/Users/jgaci/Dropbox/2016_Fall/Applied_Data_Science/Shiny_Server')
runApp('C:/Users/jgaci/Dropbox/2016_Fall/Applied_Data_Science/Shiny_Server')
library(readr)
setwd("C:/Users/jgaci/Dropbox/2016_Fall/informs_challenge")
experiment.data <- read_csv('./data/Experiment dataset.csv')
box.plot <- plot_ly(y = experiment.data$Yield, color = experiment.data$Location )
plot_ly(y = experiment.data$Yield, color = experiment.data$Location, type = "box" )
library(readr)
library(plotly)
plot_ly(y = experiment.data$Yield, color = experiment.data$Location, type = "box" )
summary(experiment.data)
unique(location)
unique(experiment.data$location)
unique(experiment.data$Location)
experiment.data$Location <- factor(experiment.data$Location)
plot_ly(y = experiment.data$Yield, color = experiment.data$Location, type = "box" )
summary(experiment.data)
unique(experiment.data$Variety)
experiment.data$Variety <- factor(experiment.data$Variety)
plot_ly(y = experiment.data$Yield, color = experiment.data$Variety, type = "box" )
summary(experiment.data)
experiment.data$Year <- factor(experiment.data$Year)
plot_ly(y = experiment.data$Yield, color = experiment.data$Year, type = "box" )
unique(experiment.data$Year)
summary(experiment.data)
experiment.data$Experiment <- factor(experiment.data$Experiment)
summary(experiment.data)
experiment.data$Variety <- character(experiment.data$Variety)
experiment.data$Variety <- character(experiment.data$Variety, length = 50)
View(experiment.data)
experiment.data$Variety <- text(experiment.data$Variety)
experiment.data$Variety <- text(experiment.data$Variety)
summary(experiment.data)
plot_ly(data = experiment.data, x = Location, y = Yield,
color = Variety)
experiment.data <- read_csv('./data/Experiment dataset.csv')
experiment.data$Location <- factor(experiment.data$Location)
experiment.data$Year <- factor(experiment.data$Year)
experiment.data$Experiment <- factor(experiment.data$Experiment)
summary(experiment.data)
plot_ly(data = experiment.data, x = Location, y = Yield,
color = Variety)
plot_ly(data = experiment.data, x = Location, y = Yield,
color = Variety, mode = "markers")
plot_ly(data = experiment.data, y = Yield,
color = Year, mode = "box")
plot_ly(data = experiment.data, y = Yield,
color = Year, mode = "box")
plot_ly(data = experiment.data, y = Yield,
color = Year, type = "box")
plot_ly(data = experiment.data, x = Location, y = Yield,
color = Variety, mode = "markers")
